apiVersion: v1
aliases:
  - &standardKinds
    properties:
      kind:
        enum:
          - Deployment
          - Pod
          - DaemonSet
          - StatefulSet
          - ReplicaSet
          - CronJob
          - Job
rules:
  - id: 1
    name: Ensure each container image has a pinned (tag) version
    uniqueName: CONTAINERS_MISSING_IMAGE_VALUE_VERSION
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-image-pinned-version'
    messageOnFailure: Incorrect value for key `image` - specify an image version to avoid unpleasant "version surprises" in the future
    category: Containers
    schema:
      definitions:
        imageValuePattern:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    type: array
                    items:
                      properties:
                        image:
                          # catch all strings with image tag version
                          pattern: "\\@sha.*|:(\\w|\\.|\\-)+$"
                          not:
                            # ignore `latest` as image tag version
                            pattern: ".*:(latest|LATEST)$"
      allOf:
        - $ref: "#/definitions/imageValuePattern"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 2
    name: Ensure each container has a configured memory request
    uniqueName: CONTAINERS_MISSING_MEMORY_REQUEST_KEY
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-memory-request'
    messageOnFailure: 'Missing property object `requests.memory` - value should be within the accepted boundaries recommended by the organization'
    category: Containers
    schema:
      definitions:
        memoryRequestPattern:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    type: array
                    items:
                      properties:
                        resources:
                          properties:
                            requests:
                              type: object
                              properties:
                                memory:
                                  type:
                                    - string
                                    - number
                              required:
                                - memory
                          required:
                            - requests
                      required:
                        - resources
      allOf:
        - $ref: "#/definitions/memoryRequestPattern"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 3
    name: Ensure each container has a configured CPU request
    uniqueName: CONTAINERS_MISSING_CPU_REQUEST_KEY
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-cpu-request'
    messageOnFailure: 'Missing property object `requests.cpu` - value should be within the accepted boundaries recommended by the organization'
    category: Containers
    schema:
      definitions:
        cpuRequestPattern:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    type: array
                    items:
                      properties:
                        resources:
                          properties:
                            requests:
                              type: object
                              properties:
                                cpu:
                                  type:
                                    - string
                                    - number
                              required:
                                - cpu
                          required:
                            - requests
                      required:
                        - resources
      allOf:
        - $ref: "#/definitions/cpuRequestPattern"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 4
    name: Ensure each container has a configured memory limit
    uniqueName: CONTAINERS_MISSING_MEMORY_LIMIT_KEY
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-memory-limit'
    messageOnFailure: 'Missing property object `limits.memory` - value should be within the accepted boundaries recommended by the organization'
    category: Containers
    schema:
      definitions:
        memoryLimitPattern:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    type: array
                    items:
                      properties:
                        resources:
                          properties:
                            limits:
                              type: object
                              properties:
                                memory:
                                  type:
                                    - string
                                    - number
                              required:
                                - memory
                          required:
                            - limits
                      required:
                        - resources
      allOf:
        - $ref: "#/definitions/memoryLimitPattern"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 5
    name: Ensure each container has a configured CPU limit
    uniqueName: CONTAINERS_MISSING_CPU_LIMIT_KEY
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-cpu-limit'
    messageOnFailure: 'Missing property object `limits.cpu` - value should be within the accepted boundaries recommended by the organization'
    category: Containers
    schema:
      definitions:
        cpuLimitPattern:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    type: array
                    items:
                      properties:
                        resources:
                          properties:
                            limits:
                              type: object
                              properties:
                                cpu:
                                  type:
                                    - string
                                    - number
                              required:
                                - cpu
                          required:
                            - limits
                      required:
                        - resources
      allOf:
        - $ref: "#/definitions/cpuLimitPattern"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 6
    name: 'Prevent Ingress from forwarding all traffic to a single container'
    uniqueName: 'INGRESS_INCORRECT_HOST_VALUE_PERMISSIVE'
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/prevent-ingress-forwarding-traffic-to-single-container'
    messageOnFailure: 'Incorrect value for key `host` - specify host instead of using a wildcard character ("*")'
    category: Networking
    schema:
      if:
        properties:
          kind:
            enum:
              - Ingress
      then:
        properties:
          spec:
            properties:
              rules:
                type: array
                items:
                  properties:
                    host:
                      type: string
                      not:
                        enum:
                          - '*'
  - id: 7
    name: Prevent Service from exposing node port
    uniqueName: SERVICE_INCORRECT_TYPE_VALUE_NODEPORT
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/prevent-node-port'
    messageOnFailure: 'Incorrect value for key `type` - `NodePort` will open a port on all nodes where it can be reached by the network external to the cluster'
    category: Networking
    schema:
      if:
        properties:
          kind:
            enum:
              - Service
      then:
        properties:
          spec:
            properties:
              type:
                type: string
                not:
                  enum:
                    - "NodePort"
  - id: 8
    name: Ensure CronJob scheduler is valid
    uniqueName: CRONJOB_INVALID_SCHEDULE_VALUE
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-cronjob-scheduler-valid'
    messageOnFailure: 'Incorrect value for key `schedule` - the (cron) schedule expressions is not valid and, therefore, will not work as expected'
    category: CronJob
    schema:
      if:
        properties:
          kind:
            enum:
              - 'CronJob'
      then:
        properties:
          spec:
            properties:
              schedule:
                pattern: (^((\*\/)?([1-5]?[0-9])((\,|\-|\/)\d+)*|\*)\s((\*\/)?((2[0-3]|1[0-9]|[0-9]))((\,|\-|\/)\d+)*|\*)\s((\*\/)?([1-9]|[12][0-9]|3[01])((\,|\-|\/)\d+)*|\*)\s((\*\/)?([1-9]|1[0-2])((\,|\-|\/)\d+)*|\*)\s((\*\/)?[0-6]((\,|\-|\/)\d+)*|\*)$)|@(annually|yearly|monthly|weekly|daily|hourly|reboot)
  - id: 9
    name: Ensure workload has valid label values
    uniqueName: WORKLOAD_INVALID_LABELS_VALUE
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-labels-value-valid'
    messageOnFailure: 'Incorrect value for key(s) under `labels` - the vales syntax is not valid so the Kubernetes engine will not accept it'
    category: Workload
    schema:
      if: *standardKinds
      then:
        properties:
          metadata:
            properties:
              labels:
                patternProperties:
                  ^.*$:
                    format: hostname
                additionalProperties: false
  - id: 10
    name: 'Ensure deployment-like resource is using a valid restart policy'
    uniqueName: 'WORKLOAD_INCORRECT_RESTARTPOLICY_VALUE_ALWAYS'
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-valid-restart-policy'
    messageOnFailure: 'Incorrect value for key `restartPolicy` - any other value than `Always` is not supported by this resource'
    category: Workload
    schema:
      if:
        properties:
          kind:
            enum:
              - Deployment
              - ReplicaSet
              - DaemonSet
              - ReplicationController
      then:
        properties:
          spec:
            properties:
              template:
                properties:
                  spec:
                    properties:
                      restartPolicy:
                        enum:
                          - 'Always'
  - id: 11
    name: Ensure each container has a configured liveness probe
    uniqueName: CONTAINERS_MISSING_LIVENESSPROBE_KEY
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-liveness-probe'
    messageOnFailure: 'Missing property object `livenessProbe` - add a properly configured livenessProbe to catch possible deadlocks'
    category: Containers
    schema:
      definitions:
        specContainers:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    items:
                      required:
                        - livenessProbe
      allOf:
        - $ref: "#/definitions/specContainers"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 12
    name: Ensure each container has a configured readiness probe
    uniqueName: CONTAINERS_MISSING_READINESSPROBE_KEY
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-readiness-probe'
    messageOnFailure: 'Missing property object `readinessProbe` - add a properly configured readinessProbe to notify kubelet your Pods are ready for traffic'
    category: Containers
    schema:
      definitions:
        specContainers:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    items:
                      required:
                        - readinessProbe
      allOf:
        - $ref: "#/definitions/specContainers"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 13
    name: Ensure HPA has minimum replicas configured
    uniqueName: HPA_MISSING_MINREPLICAS_KEY
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-hpa-minimum-replicas'
    messageOnFailure: 'Missing property object `minReplicas` - the value should be within the accepted boundaries recommended by the organization'
    category: Other
    schema:
      if:
        properties:
          kind:
            enum:
              - HorizontalPodAutoscaler
      then:
        properties:
          spec:
            required:
              - minReplicas
  - id: 14
    name: Ensure HPA has maximum replicas configured
    uniqueName: HPA_MISSING_MAXREPLICAS_KEY
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-hpa-maximum-replicas'
    messageOnFailure: 'Missing property object `maxReplicas` - the value should be within the accepted boundaries recommended by the organization'
    category: Other
    schema:
      if:
        properties:
          kind:
            enum:
              - HorizontalPodAutoscaler
      then:
        properties:
          spec:
            required:
              - maxReplicas
  - id: 15
    name: Prevent workload from using the default namespace
    uniqueName: WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/prevent-deafult-namespce'
    messageOnFailure: Incorrect value for key `namespace` - use an explicit namespace instead of the default one (`default`)
    category: Workload
    schema:
      if: *standardKinds
      then:
        properties:
          metadata:
            properties:
              namespace:
                not:
                  enum:
                    - 'default'
  - id: 16
    name: 'Ensure Deployment has more than one replica configured'
    uniqueName: 'DEPLOYMENT_INCORRECT_REPLICAS_VALUE'
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-minimum-two-replicas'
    messageOnFailure: 'Incorrect value for key `replicas` - running 2 or more replicas will increase the availability of the service'
    category: Workload
    schema:
      if:
        properties:
          kind:
            enum:
              - Deployment
      then:
        properties:
          spec:
            properties:
              replicas:
                minimum: 2
  - id: 17
    name: 'Ensure CronJob has a configured deadline'
    uniqueName: 'CRONJOB_MISSING_STARTINGDEADLINESECOND_KEY'
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/ensure-cronjob-deadline'
    messageOnFailure: 'Missing property object `startingDeadlineSeconds` - set a time limit to the cron execution to allow killing it if exceeded'
    category: CronJob
    schema:
      if:
        properties:
          kind:
            enum:
              - CronJob
      then:
        properties:
          spec:
            properties:
              startingDeadlineSeconds:
                type: number
            required:
              - startingDeadlineSeconds
  - id: 18
    name: 'Prevent deprecated APIs in Kubernetes v1.16'
    uniqueName: 'K8S_DEPRECATED_APIVERSION_1.16'
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/prevent-deprecated-k8s-api-116'
    messageOnFailure: 'Incorrect value for key `apiVersion` - the version you are trying to use is not supported by the Kubernetes cluster version (>=1.16)'
    category: Deprecation
    schema:
      properties:
        apiVersion:
          type: string
          not:
            enum:
              - 'extensions/v1beta1'
              - 'apps/v1beta1'
              - 'apps/v1beta2'
  - id: 19
    name: 'Prevent deprecated APIs in Kubernetes v1.17'
    uniqueName: 'K8S_DEPRECATED_APIVERSION_1.17'
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/prevent-deprecated-k8s-api-117'
    messageOnFailure: 'Incorrect value for key `apiVersion` - the version you are trying to use is not supported by the Kubernetes cluster version (>=1.17)'
    category: Deprecation
    schema:
      properties:
        apiVersion:
          type: string
          not:
            enum:
              - 'kubeadm.k8s.io/v1beta1'
              - 'rbac.authorization.k8s.io/v1alpha1'
              - 'rbac.authorization.k8s.io/v1beta1'
  - id: 20
    name: 'Prevent containers from having root access capabilities'
    uniqueName: 'CONTAINERS_INCORRECT_PRIVILEGED_VALUE_TRUE'
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/prevent-privileged-containers'
    messageOnFailure: 'Incorrect value for key `privileged` - this mode will allow the container the same access as processes running on the host'
    category: Containers
    schema:
      definitions:
        specContainers:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    type: array
                    items:
                      properties:
                        securityContext:
                          properties:
                            privileged:
                              not:
                                enum:
                                  - true
                                  - 'true'
      allOf:
        - $ref: "#/definitions/specContainers"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 21
    name: Ensure workload has a configured `owner` label
    uniqueName: WORKLOAD_MISSING_LABEL_OWNER_VALUE
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/ensure-owner-label'
    messageOnFailure: 'Missing label object `owner` - add a proper owner label to know which person/team to ping when needed'
    category: Workload
    schema:
      if: *standardKinds
      then:
        properties:
          metadata:
            properties:
              labels:
                required:
                  - owner
  - id: 22
    name: Ensure Deployment has a configured `env` label
    uniqueName: DEPLOYMENT_MISSING_LABEL_ENV_VALUE
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/ensure-env-label'
    messageOnFailure: 'Missing label object `env` - add a proper environment description (e.g. "prod", "testing", etc.) to the Deployment config'
    category: Workload
    schema:
      if:
        properties:
          kind:
            enum:
              - Deployment
      then:
        properties:
          metadata:
            properties:
              labels:
                required:
                  - env
            required:
              - labels
        required:
          - metadata
  - id: 23
    name: Ensure each container image has a digest tag
    uniqueName: CONTAINERS_MISSING_IMAGE_VALUE_DIGEST
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/ensure-digest-tag'
    messageOnFailure: 'Incorrect value for key `image` - add a digest tag (starts with `@sha256:`) to represent an immutable version of the image'
    category: Containers
    schema:
      definitions:
        imageValuePattern:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    type: array
                    items:
                      properties:
                        image:
                          pattern: .*\@sha256\:\S{64}$
      allOf:
        - $ref: "#/definitions/imageValuePattern"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 24
    name: 'Prevent CronJob from executing jobs concurrently'
    uniqueName: 'CRONJOB_MISSING_CONCURRENCYPOLICY_KEY'
    enabledByDefault: true
    documentationUrl: 'https://hub.datree.io/prevent-cronjob-concurrency'
    messageOnFailure: Missing property object `concurrencyPolicy` - the behavior will be more deterministic if jobs won't run concurrently
    category: CronJob
    schema:
      if:
        properties:
          kind:
            enum:
              - CronJob
      then:
        properties:
          spec:
            properties:
              concurrencyPolicy:
                enum:
                  - 'Forbid'
                  - 'Replace'
            required:
              - concurrencyPolicy
  - id: 25
    name: 'Prevent deploying naked pods'
    uniqueName: 'K8S_INCORRECT_KIND_VALUE_POD'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/prevent-naked-pods'
    messageOnFailure: Incorrect value for key `kind` - raw pod won't be rescheduled in the event of a node failure
    category: Other
    schema:
      properties:
        kind:
          type: string
          not:
            enum:
              - 'Pod'
  - id: 26
    name: Prevent containers from sharing the host's PID namespace
    uniqueName: 'CONTAINERS_INCORRECT_HOSTPID_VALUE_TRUE'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/prevent-using-host-pid'
    messageOnFailure: Incorrect value for key `hostPID` - running on the host's PID namespace enables access to sensitive information from processes running outside the container
    category: Containers
    schema:
      definitions:
        specContainers:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  hostPID:
                    not:
                      enum:
                        - true
                        - 'true'
      allOf:
        - $ref: "#/definitions/specContainers"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 27
    name: 'Prevent containers from sharing the host`s IPC namespace'
    uniqueName: 'CONTAINERS_INCORRECT_HOSTIPC_VALUE_TRUE'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/prevent-using-host-ipc'
    messageOnFailure: 'Incorrect value for key `hostIPC` - running on the host`s IPC namespace can be (maliciously) used to interact with other processes running outside the container'
    category: Containers
    schema:
      definitions:
        specContainers:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  hostIPC:
                    not:
                      enum:
                        - true
                        - 'true'
      allOf:
        - $ref: "#/definitions/specContainers"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 28
    name: Prevent containers from sharing the host's network namespace
    uniqueName: 'CONTAINERS_INCORRECT_HOSTNETWORK_VALUE_TRUE'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/prevent-using-host-network'
    messageOnFailure: Incorrect value for key `hostNetwork` - running on the host's network namespace can allow a compromised container to sniff network traffic
    category: Containers
    schema:
      definitions:
        specContainers:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  hostNetwork:
                    not:
                      enum:
                        - true
                        - 'true'
      allOf:
        - $ref: "#/definitions/specContainers"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 29
    name: 'Prevent containers from accessing host files by using high UIDs'
    uniqueName: 'CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/prevent-uid-conflicts'
    messageOnFailure: 'Incorrect value for key `runAsUser` - value should be above 9999 to reduce the likelihood that the UID is already taken'
    category: Containers
    schema:
      definitions:
        specContainers:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    type: array
                    items:
                      properties:
                        securityContext:
                          properties:
                            runAsUser:
                              minimum: 10000
      allOf:
        - $ref: "#/definitions/specContainers"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 30
    name: 'Prevent containers from mounting Docker socket'
    uniqueName: 'CONTAINERS_INCORRECT_PATH_VALUE_DOCKERSOCKET'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/prevent-mounting-docker-socket'
    messageOnFailure: 'Incorrect value for key `path` - avoid mounting the docker.socket becasue it can allow container breakout'
    category: Containers
    schema:
      definitions:
        specContainers:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  containers:
                    type: array
                    items:
                      properties:
                        volumeMounts:
                          type: array
                          items:
                            properties:
                              mountPath:
                                not:
                                  enum:
                                    - "/var/run/docker.sock"
        specVolumes:
          if: *standardKinds
          then:
            properties:
              spec:
                properties:
                  volumes:
                    type: array
                    items:
                      properties:
                        hostPath:
                          properties:
                            path:
                              not:
                                enum:
                                  - "/var/run/docker.sock"
      allOf:
        - $ref: "#/definitions/specContainers"
        - $ref: "#/definitions/specVolumes"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 31
    name: 'Prevent ConfigMap security vulnerability (CVE-2021-25742)'
    uniqueName: 'CONFIGMAP_CVE2021_25742_INCORRECT_SNIPPET_ANNOTATIONS_VALUE'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/-prevent-configmap-security-vulnerability-cve-2021-25742'
    messageOnFailure: Missing property object `allow-snippet-annotations` - set it to "false" to override default behaviour
    category: Security
    schema:
      if:
        properties:
          kind:
            enum:
              - ConfigMap
      then:
        properties:
          data:
            properties:
              allow-snippet-annotations:
                enum:
                  - 'false'
            required:
              - allow-snippet-annotations
  - id: 32
    name: 'Prevent Ingress security vulnerability (CVE-2021-25742)'
    uniqueName: 'INGRESS_CVE2021_25742_INCORRECT_SERVER_SNIPPET_KEY'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/-prevent-ingress-security-vulnerability-cve-2021-25742'
    messageOnFailure: Forbidden property object `server-snippet` - ingress-nginx custom snippets are not allowed
    category: Security
    schema:
      if:
        properties:
          kind:
            enum:
              - Ingress
      then:
        properties:
          metadata:
            properties:
              annotations:
                not:
                  propertyNames:
                    pattern: ^.*server-snippet$
  - id: 33
    name: 'Prevent container security vulnerability (CVE-2021-25741)'
    uniqueName: 'CONTAINER_CVE2021_25741_INCORRECT_SUBPATH_KEY'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/-prevent-container-security-vulnerability-cve-2021-25741'
    messageOnFailure: Forbidden property object `subPath` - malicious users can gain access to files & directories outside of the volume
    category: Security
    schema:
      definitions:
        subPathPattern:
          properties:
            spec:
              properties:
                containers:
                  type: array
                  items:
                    properties:
                      volumeMounts:
                        type: array
                        items:
                          propertyNames:
                            not:
                              pattern: ^subPath$
      allOf:
        - $ref: "#/definitions/subPathPattern"
      additionalProperties:
        $ref: "#"
      items:
        $ref: "#"
  - id: 34
    name: 'Prevent EndpointSlice security vulnerability (CVE-2021-25737)'
    uniqueName: 'ENDPOINTSLICE_CVE2021_25373_INCORRECT_ADDRESSES_VALUE'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/-prevent-endpointslice-validation-from-enabling-host-network-hijack-cve-2021-25737'
    messageOnFailure: Incorrect value for key `addresses` - IP address is within vulnerable ranges (127.0.0.0/8 and 169.254.0.0/16)
    category: Security
    schema:
      if:
        properties:
          kind:
            enum:
              - EndpointSlice
      then:
        properties:
          endpoints:
            type: array
            items:
              properties:
                addresses:
                  type: array
                  items:
                    not:
                      anyOf:
                        - pattern: ^(169\.254\.)
                        - pattern: ^(127\.)
  - id: 34
    name: 'Prevent EndpointSlice security vulnerability (CVE-2021-25737)'
    uniqueName: 'ENDPOINTSLICE_CVE2021_25373_INCORRECT_ADDRESSES_VALUE'
    enabledByDefault: false
    documentationUrl: 'https://hub.datree.io/-prevent-endpointslice-validation-from-enabling-host-network-hijack-cve-2021-25737'
    messageOnFailure: Incorrect value for key `addresses` - IP address is within vulnerable ranges (127.0.0.0/8 and 169.254.0.0/16)
    category: Security
    schema:
      if:
        properties:
          kind:
            enum:
              - EndpointSlice
      then:
        properties:
          endpoints:
            type: array
            items:
              properties:
                addresses:
                  type: array
                  items:
                    not:
                      anyOf:
                        - pattern: ^(169\.254\.)
                        - pattern: ^(127\.)
  - id: 35
    name: 'Ensure DAG fail-fast on node failure'
    uniqueName: 'ARGO_WORKFLOW_INCORRECT_FAILFAST_VALUE_FALSE'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Incorrect value for key `failFast` - value should be `true` to prevent DAG from running on all branches, regardless of the failed outcomes of the DAG branches
    category: Argo
    schema:
      if:
        properties:
          kind:
            enum:
             - Workflow
          spec:
            properties:
              templates:
                type: array
                items:
                  properties:
                    dag:
                      properties:
                        failFast:
                          required:
                            - failFast
      then:
        properties:
          spec:
            properties:
              templates:
                type: array
                items:
                  properties:
                    dag:
                      properties:
                        failFast:
                          const: true
  - id: 36
    name: 'Ensure Workflow pods do not use the default service account'
    uniqueName: 'ARGO_WORKFLOW_INCORRECT_SERVICE_ACCOUNT_NAME_VALUE_DEFAULT'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Incorrect value for key `serviceAccountName` - when set to `default` container is exposed to possible attacks
    category: Argo
    schema:
      if:
          properties:
          kind:
            enum:
              - WorkflowTemplate
              - Workflow
      then:
        properties:
          spec:
            properties:
              serviceAccountName:
                type: string
                not:
                  const: default
            required:
              - serviceAccountName
  - id: 37
    name: 'Ensure ConfigMap is usable by ArgoCD'
    uniqueName: 'ARGO_CONFIGMAP_MISSING_PART_OF_LABEL_VALUE_ARGOCD'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Incorrect value for annotation `app.kubernetes.io/part-of` - value should be `argocd`, or ArgoCD won't recognize this resource
    category: Argo
    schema:
      if: 
        properties:
          kind:
            enum:
              - ConfigMap
          metadata:
            properties:
              name:
                enum:
                  - argocd-tls-certs-cm
                  - argocd-rbac-cm
                  - argocd-ssh-known-hosts-cm
                  - argocd-cmd-params-cm
                  - argo-cm
      then:
        properties:
          metadata:
            properties:
              labels:
                properties:
                  app.kubernetes.io/part-of:
                    type: string
                    const: argocd
                required:
                  - app.kubernetes.io/part-of
  - id: 38
    name: 'Ensure ConfigMap is usable by ArgoCD'
    uniqueName: 'ARGO_ROLLOUT_MISSING_PAUSE_DURATION'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Missing the key `duration` - prevent the rollout from waiting indefinitely for the pause condition
    category: Argo
    schema:
      if:
        properties:
          kind:
            enum:
              - Rollout
      then:
        properties:
          spec:
            properties:
              strategy:
                properties:
                  canary:
                    type: object
                    properties:
                      steps:
                        type: array
                        items:
                          properties:
                            pause:
                              type: object
                              properties:
                                duration:
                                  type: string
                              required:
                                - duration
  - id: 39
    name: 'Ensure Application and AppProject namespaces are valid'
    uniqueName: 'ARGO_APP_PROJECT_INCORRECT_NAMESPACE_VALUE'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Incorrect value for property `namespace` - Application and AppProject have to be installed on the argocd namespace
    category: Argo
    schema:
      if:
        properties:
          kind:
            enum:
              - Application
              - AppProject
      then:
        properties:
          metadata:
            properties:
              namespace: 
                type: string
                const: argocd
            required:
              - namespace
  - id: 40
    name: 'Ensure Application and AppProject namespaces are valid'
    uniqueName: 'ARGO_WORKFLOW_INCORRECT_RETRY_STRATEGY_VALUE_EMPTY'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Incorrect value for key `retryStrategy` - empty value (`{}`) can cause failed/errored steps to keep retrying, which can result in OOM issues
    category: Argo
    schema:
      if:
        properties:
          kind:
            enum:
              - Workflow
      then:
        properties:
          spec:
            properties:
              templates:
                items:
                  properties:
                    retryStrategy:
                      type: object
                      minProperties: 1
  - id: 41
    name: 'Ensure Rollouts revisionHistoryLimit is not set to 0'
    uniqueName: 'ARGO_WORKFLOW_INCORRECT_REVISION_HISTORY_LIMIT_VALUE_0'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Incorrect value for key `revisionHistoryLimit` - value above 0 is required to enable rolling back from a failed deployment
    category: Argo
    schema:
      if: 
        properties:
          kind:
            enum:
              - Rollout
      then:
        properties:
          spec:
            properties:
              revisionHistoryLimit:
                minimum: 1
            required:
              - revisionHistoryLimit
  - id: 42
    name: 'Ensure Bluegreen Rollouts scaleDownDelaySeconds is at least 30 seconds'
    uniqueName: 'ARGO_ROLLOUT_INCORRECT_SCALE_DOWN_DELAY_VALUE_BELOW_30'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Incorrect value for key `scalDownDelaySeconds` - value should be at least 30 to prevent packets from being sent to a node that killed the pod
    category: Argo
    schema:
      if:
        properties:
          kind:
            enum:
              - Rollout
      then:
        properties:
          spec:
            properties:
              strategy:
                properties:
                  blueGreen:
                    type: object
                    properties:
                      scaleDownDelaySeconds:
                        type: integer
                        minimum: 30
                    required:
                      - scaleDownDelaySeconds
  - id: 43
    name: 'Ensure Rollouts with Progress DeadlineSeconds set have progressDeadlineAbort set to true'
    uniqueName: 'ARGO_ROLLOUT_INCORRECT_PROGRESS_DEADLINE_ABORT_VALUE_FALSE'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Incorrect value for key `progressDeadlineAbort` - value should be `true` to prevent the rollout pod from retrying indefinitely
    category: Argo
    schema:
      if:
        properties:
          kind:
            enum:
              - Rollout
          spec:
            properties:
              allOf:
                properties:
                  progressDeadlineSeconds:
                    type: integer
                  progressDeadlineAbort:
                    type: boolean
      then:
        properties:
          spec:
            properties:
              progressDeadlineAbort:
                const: true
  - id: 44
    name: 'Ensure a Workflow retryPolicy is set on both Error and TransientError'
    uniqueName: 'ARGO_WORKFLOW_ENSURE_RETRY_ON_BOTH_ERROR_AND_TRANSIENT_ERROR'
    enabledByDefault: true
    documentationUrl: # TODO
    messageOnFailure: Inccorect value for key `retryPolicy` - the expression should include retry on steps that failed either on transient or Argo controller errors
    category: Argo
    schema:
      if:
        properties:
          kind:
            enum:
              - Workflow
          spec:
            properties:
              templates:
                items:
                  properties:
                    retryStrategy:
                      properties:
                        retryPolicy:
                          const: Always
                      required:
                        - retryPolicy
      then:
          properties:
            spec:
              properties:
                templates:
                  items:
                    properties:
                      retryStrategy:
                        type: object
                        properties:
                          expression:
                            const: lastRetry.status == "Error" or (lastRetry.status == "Failed" and asInt(lastRetry.exitCode) not in [0])
                          retryPolicy:
                            pattern: .*