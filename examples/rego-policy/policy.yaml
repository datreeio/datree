apiVersion: v1
policies:
  - name: rego_policy
    isDefault: true
    rules:
      - identifier: CUSTOM_INGRESS_INCORRECT_HOST_VALUE
        messageOnFailure: "host value should contain a valid organization name (*.example.com)"
      - identifier: CUSTOM_INGRESS_INCORRECT_HOST_VALUE_2
        messageOnFailure: "host value should contain a valid organization name (*.example.com)"


customRules:
  - identifier: CUSTOM_INGRESS_INCORRECT_HOST_VALUE
    name: Ensure Ingress only uses approved domain names for hostnames [CUSTOM RULE]
    defaultMessageOnFailure: host value should contain a valid organization name (*.example.com)
    schema:
      # constraint schema
      if:
        properties:
          kind:
            type: string
            enum:
              - Deployment
      then:
        regoDefinition:
          libs:
            - |
              package lib.helpers
              make_message(isMissing) = msg {
                          msg := sprintf("you must provide labels: %v", [isMissing])
                        }
          code: |
            package foosystemrequiredlabels
            import data.lib.helpers
            
            violation[aBool] {
            provided := {label | input.metadata.labels[label]}
            required := {"billing"}
            missing := required - provided
            aBool := count(missing) > 0
            }
  - identifier: CUSTOM_INGRESS_INCORRECT_HOST_VALUE_2
    name: Ensure Ingress only uses approved domain names for hostnames [CUSTOM RULE]
    defaultMessageOnFailure: host value should contain a valid organization name (*.example.com)
    schema:
      # constraint schema
      if:
        properties:
          kind:
            type: string
            enum:
              - Secret
      then:
        regoDefinition:
          libs:
            - |
              package lib.helpers
              make_message(isMissing) = msg {
                          msg := sprintf("you must provide labels: %v", [isMissing])
                        }
          code: |
            package foosystemrequiredlabels
            import data.lib.helpers
            
            violation[aBool] {
            provided := {label | input.metadata.labels[label]}
            required := {"environment"}
            missing := required - provided
            aBool := count(missing) > 0
            }
